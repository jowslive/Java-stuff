Herança ( continuação )
-reescrita de metodo
Todo final de ano os funcionários do nono banco recebem uma bonificação . Os funcionarios comuns recebem 10% do valor do salario e os gerentes 15% .
Ex: class funcionario {
protected String nome;
protected String cpf;
protected double salario;
public double getBonificacao(){
return this.salario*0,1;
}
//demais metodos
}
Se deixarmos a classe gerente como esta , ela vai herdar o metodo "getBonificacao"
Gerente gerente=newGerenge();
gerente.setSalario(5000.0);
System.out.println(gerente.getbonificacao;

O resultado aqui sera 500. Não queremos essa resposta , pois o bonus para o gerente deveria ser de 750 nesse caso . Para corrigir isso , uma das opcoes seria criar um novo metodo na classe Gerente , chamado por exemplo : "getBonificacaoDoGerente". O problema é que teriamos dois metodos em "gerente" , confundindo bastante quem for usar essa clase , alem do que , cada metodo apresenta uma resposta diferente .
No Java, quando herdamos um metodo , podemos alterar seu comportamento . Podemos reescrever (reescrever , sobrescrever , overside) esse metodo.

class Gerente extends Funcionario{
int senha ;
int numeroDeFuncionarios;
public double GetBonificacao(){
return this.salario*0,15;
}
// metodos
}
Agora o metodo esta correto para o Gerente.

-Anotacao @override
Há como deixar explicito no seu codigo que determinado metodo é a reescrita de um metodo da superclasse (classe mae) .Fazemos isto colocando "@override" na linha anterior à descrição do metodo. Isso é chamado de anotacoes.

Ex : @override
public double getBonificacao(){
return this.salario*0,15;
}
Por questoes de compatibilidade isso nao é obrigatorio. Mas caso um metodo esteja anotado com @override , ele necessariamente precisa estar reescrevendo um método da classe mãe .


